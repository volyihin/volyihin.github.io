title=Удаление символов из строки
date=2015-06-24
type=post
tags=algorithm
status=published
summary=Серия задачек на подумать, осознать. На этот раз будем разбираться с удалением смимволов из строки.
image=../img/deletesimbol.png
~~~~~~

== Задача 
Написать эффективную функцию, которая удалит символы из строки.

	string removeChars( string str, string remove );

Любой символ, который содержиться в строке `remove` должен быть удален из `str`.

Например, дана строка `Battle of the Vowels: Hawaii vs. Grozny`  нужно удалить `aeiou`, функция должна вернуть вот такой результат - `Bttl f th Vwls: Hw vs. Grzny`. Прокомментировать любое принятое решение в процессе разработки алгоритма и определить эффективность решения.

'''

Эту задачу можно разделить на две части. Для каждого символа нужно определить - должен ли он быть удален. Потом, само удаление соотвествующего символа. Сначала мы обсудим удаление символа.

Удаление символа из строки алгоритмически эквивалентно удалению элемента из массива. Массив обычно хранится одним сплошным блоком в памяти, так что нельзя просто так удалить элемент из середины, как можно было бы сделать, если это был связный список.

Вместо этого в массиве нужно переставить элементы таким образом, чтобы  вместо удаляемого элемента сразу шли следующие за ним. Например, если мы хотим удалить символ `c` из строки `abcd`, то мы можем либо двинуть символы `ab` на одну позицию вперед, либо сдвинуть символ `d` на одну позицию назад. Оба подхода, конечно, приводят онк одному и тому же результату - `abd`. 

image::../../img/Exif.jpg[]

Кроме того, что нужно подвинуть данные, также необходимо уменьшить размер строки на один символ. Получается, в первом случае необходимо будет уничтожить первый элемент, а во втором - последний. Во многих языках гораздо легче удалять элемент с конца массива(либо уменьшая длинну строки на один, либо записывая последним элементом `null`, в зависимости от языка) чем с начала, поэтому сдвигать символы в начало будет наилучшим вариантом.

Каково время работы алгоритма в наихудшем случае, когда нужно удалить все символы в строке str? Для каждого удаления потребуется сдвигать все остальные символы назад на одну позицию Если строка будет длинны `n`, то потребуется сдвинуть последний сивол `n - 1` раз, предпоследний - `n - 2` раза, и так далее, то есть в итоге 'O(n^2)' на удаление. 

image::../../img/Exif.jpg[]

Если начать удалять символы строки с конца, то будет немного эффективнее, но сложность останется все равно `O(n^2)` в худшем случае. Сдвигать один и тот же символ несколько раз подряд не очень эффективно. Как избежать этого? Что если создать какой-нибудь строковый буфер и произвоть все модификации в нем вместо исходной строки? Затем мы просто сможем копировать символы из буфера, пропуская те символы, которые хотим удалить. Когда закончится построение результирующей строки, то можно просто скопировать ее в исходную. Таким образом каждый символ передвигается как минимум 2 раза, что в итоге дает удаление за `O(n)`.

Однако мы приобретаем затраты на память этого буфера, который будет такого же размера, как исходная строка, а также затраты на копирование обратно уже итоговой строки. 


---------------------

image::../../img/Exif.jpg[]

 This way, you move each character at most twice, yielding
O(n) deletion. However, you’ve incurred the memory overhead of a temporary buffer the same
size as the original string, and the time overhead of copying the modified string back over the original
string. Is there any way you can avoid these penalties while retaining your O(n) algorithm?
To implement the O(n) algorithm just described, you need to track a source position for the read
location in the original string and a destination position for the write position in the temporary buffer.
These positions both start at zero. The source position is incremented every time you read, and
the destination position is incremented every time you write. In other words, when you copy a character,
you increment both positions, but when you delete a character, you increment only the source
position. This means the source position is always the same as or ahead of the destination position.
After you read a character from the original string (that is, the source position has advanced past it),
you no longer need that character — because you’re just going to copy the modified string over it.
Because the destination position in the original string is always a character you don’t need anymore,
you can write directly into the original string, eliminating the temporary buffer entirely. This is still
an O(n) algorithm but without the memory and time overhead of the earlier version.
Now that you know how to delete characters, consider the task of deciding whether to delete a particular
character. The easiest way to do this is to compare the character to each character in remove
and delete it if it matches any of them. How efficient is this? If str is n characters long and remove is
m characters long, then in the worst case you make m comparisons for each of n characters, so the
algorithm is O(nm). You can’t avoid checking each of the n characters in str, but perhaps you can
make the lookup that determines whether a given character is in remove better than O(m).
If you’ve already read the solution to “Find the First Nonrepeated Character,” this should sound
familiar. Just as you did in that problem, you can use remove to build an array or hash table that
has constant time lookup, thus giving an O(n) solution. The trade-offs between hash tables and
arrays are the same as previously discussed. In this case, an array is most appropriate when str
and remove are long and characters have relatively few possible values (for example, ASCII strings).
A hash table may be a better choice when str and remove are short or characters have many possible
values (for example, Unicode strings). Either choice could be acceptable as long as you justify it
appropriately. This time, you’re told that the inputs are ASCII strings, so the array wouldn’t be too
big; because the previous implementation used a hash table, try using an array for this one.
